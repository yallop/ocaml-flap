(* Extracted from https://github.com/draperlaboratory/parts. *)

(* Copyright (c) 2020 The Charles Stark Draper Laboratory, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)

module Runtime = struct (* from runtime.ml *)
  (** The type of stream internals *)
  type 'a stream_t = { mutable pos : int; byte_stream : bytes }

  let from_file file =
    let ic = open_in file in
    let n = in_channel_length ic in
    let byte_stream = Bytes.create n in
    really_input ic byte_stream 0 n;
    close_in ic;
    { pos = 0; byte_stream = byte_stream }

  let from_string string =
    let n = String.length string in
    let byte_stream = Bytes.create n in
    Bytes.blit_string string 0 byte_stream 0 n;
    { pos = 0; byte_stream = byte_stream }

  (**  This was just for error messages. We should try to extract to just strings?
       picking a buffer of 128 may be insufficient. I dunno. A quick hack
  *)
  let string_of_chars chars =
    let buf = Buffer.create 128 in
    List.iter (Buffer.add_char buf) chars;
    Buffer.contents buf


  let rec fix (f : (('a -> 'b) -> 'a -> 'b)) : 'a -> 'b =
    fun a -> f (fix f) a

  let let_ : 'a -> ('a -> 'b) -> 'b =
    fun x f -> f x

  let ocaml_peek : 'a stream_t -> ('a option -> 'b) -> 'b  =
    fun st k ->
    if st.pos < Bytes.length st.byte_stream then
      let head = Obj.magic (Bytes.unsafe_get st.byte_stream st.pos) in
      k (Some head)
    else
      k None

  let ocaml_drop : 'a stream_t -> ('a stream_t -> 'b) -> 'b  =
    fun st k -> st.pos <- st.pos + 1; k st

  let ocaml_lookahead : 'a stream_t -> ('a stream_t -> 'b) -> 'b =
    fun st k ->
    let old_st = { pos = st.pos; byte_stream = st.byte_stream } in
    k old_st

  exception Parse_fail of string

  let failwith_ : char list -> 'a =
    fun msg ->
    let err_str = Printf.sprintf "Error: %s\n" (string_of_chars msg) in
    raise (Parse_fail err_str)
end

module Example_parsers = struct (* from example_parsers.ml *)
  (* Auto generated by coq. Do not modify. *)


  type __ = Obj.t
  let __ = let rec f _ = Obj.repr f in Obj.repr f

  type 'a sig0 = 'a
    (* singleton inductive, whose constructor was exist *)



  type 'a setCompl =
  | Is_set of 'a list
  | Is_compl of 'a list

  type ('rv, 'st, 'tok, 'tag, 'out) machine =
  | Var of 'rv
  | Error of char list
  | Return of 'out
  | Drop of ('rv, 'st, 'tok, 'tag, 'out) machine
  | Call of ('rv, 'st, 'tok, 'tag, __) machine
     * (__ -> ('rv, 'st, 'tok, 'tag, 'out) machine)
  | Fix of ('rv -> ('rv, 'st, 'tok, 'tag, 'out) machine)
  | Peek of 'tag setCompl * ('rv, 'st, 'tok, 'tag, 'out) machine
     * ('rv, 'st, 'tok, 'tag, 'out) machine
     * ('rv, 'st, 'tok, 'tag, 'out) machine
  | Lookahead of ('rv, 'st, 'tok, 'tag, bool option) machine
     * ('rv, 'st, 'tok, 'tag, 'out) machine
     * ('rv, 'st, 'tok, 'tag, 'out) machine
     * ('rv, 'st, 'tok, 'tag, 'out) machine
  | Return_Drop_Tok of ('tok -> 'out)
  | Read of ('st -> ('rv, 'st, 'tok, 'tag, 'out) machine)
  | Write of ('st -> 'st) * ('rv, 'st, 'tok, 'tag, 'out) machine

  type ('tok, 'tag) bInfo = { take_branch : ('tok -> 'tag setCompl -> bool);
                              intersect : ('tag setCompl -> 'tag setCompl ->
                                          'tag setCompl);
                              union : ('tag setCompl -> 'tag setCompl -> 'tag
                                      setCompl);
                              compl : ('tag setCompl -> 'tag setCompl);
                              subset : ('tag setCompl -> 'tag setCompl -> bool) }



  type ('str, 'a) stream = { state : 'str;
                             peek_st : (__ -> 'str -> ('a option -> __) -> __);
                             drop_st : (__ -> 'str -> ('str -> __) -> __);
                             lookahead_st : (__ -> 'str -> ('str -> __) -> __) }

  type 'a ocaml_stream = 'a Runtime.stream_t

  type 'a tok =
  | Known of 'a
  | Unknown
  | EOF

  type ('st, 'tag, 'tok, 'out) opt =
    ('st -> ('tok ocaml_stream, 'tok) stream -> 'out)

  module Sexp =
   struct
    type sexp_tok =
    | Atom
    | LParen
    | RParen

    (** val p_sexp_opt :
        ((unit * unit) -> (char ocaml_stream, char) stream -> int) **)

    let p_sexp_opt x x0 =
      Runtime.let_
        (Runtime.let_
          (Runtime.ocaml_peek x0.state (fun x1 ->
            match x1 with
            | Some x2 ->
              if (=) x2 '('
              then Runtime.let_
                     (Runtime.ocaml_drop x0.state (fun x3 -> ((x2,
                       (let (x4, _) = x in x4)), x3))) (fun x3 ->
                     let (x4, x5) = x3 in let (_, x6) = x4 in ((LParen, x6), x5))
              else if (=) x2 ')'
                   then Runtime.let_
                          (Runtime.ocaml_drop x0.state (fun x3 -> ((x2,
                            (let (x4, _) = x in x4)), x3))) (fun x3 ->
                          let (x4, x5) = x3 in
                          let (_, x6) = x4 in ((RParen, x6), x5))
                   else Runtime.let_
                          (Runtime.let_
                            (if (||) ((&&) ((>=) x2 'A') ((<=) x2 'Z'))
                                  ((&&) ((>=) x2 'a') ((<=) x2 'z'))
                             then Runtime.ocaml_drop x0.state (fun x3 -> ((x2,
                                    (let (x4, _) = x in x4)), x3))
                             else Runtime.failwith_
                                    ('p'::('a'::('r'::('s'::('e'::('_'::('e'::('x'::('a'::('c'::('t'::(':'::(' '::('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('T'::('o'::('k'::('e'::('n'::('!'::[])))))))))))))))))))))))))))))))
                            (fun x3 ->
                            let (x4, x5) = x3 in
                            let (_, x6) = x4 in
                            let rec ffix x7 x8 x9 =
                              Runtime.ocaml_peek x9 (fun x10 ->
                                match x10 with
                                | Some x11 ->
                                  if (||) ((&&) ((>=) x11 '0') ((<=) x11 '9'))
                                       ((||)
                                         ((&&) ((>=) x11 'A') ((<=) x11 'Z'))
                                         ((&&) ((>=) x11 'a') ((<=) x11 'z')))
                                  then Runtime.let_
                                         (Runtime.ocaml_drop x9 (fun x12 ->
                                           ((x11, x8), x12))) (fun x12 ->
                                         let (x13, x14) = x12 in
                                         let (_, x15) = x13 in ffix x7 x15 x14)
                                  else x7 () x8 x9
                                | None -> x7 () x8 x9)
                            in ffix (fun x7 x8 x9 -> ((x7, x8), x9)) x6 x5))
                          (fun x3 ->
                          let (x4, x5) = x3 in
                          let (_, x6) = x4 in ((Atom, x6), x5))
            | None ->
              Runtime.failwith_
                ('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('E'::('O'::('F'::('!'::[])))))))))))))))))
          (fun x1 ->
          let (x2, x3) = x1 in
          let (x4, x5) = x2 in
          Runtime.let_
            (let rec ffix x6 x7 x8 =
               Runtime.ocaml_peek x8 (fun x9 ->
                 match x9 with
                 | Some x10 ->
                   if (||) ((&&) ((>=) x10 '\t') ((<=) x10 '\r')) ((=) x10 ' ')
                   then Runtime.let_
                          (Runtime.ocaml_drop x8 (fun x11 -> (((), x7), x11)))
                          (fun x11 ->
                          let (x12, x13) = x11 in
                          let (_, x14) = x12 in ffix x6 x14 x13)
                   else x6 () x7 x8
                 | None -> x6 () x7 x8)
             in ffix (fun x6 x7 x8 -> ((x6, x7), x8)) x5 x3) (fun x6 ->
            let (x7, x8) = x6 in let (x9, x10) = x7 in (((x4, x9), x10), x8))))
        (fun x1 ->
        let (x2, x3) = x1 in
        let (x4, x5) = x2 in
        let rec ffix x6 x7 x8 = match x8 with
        | (x9, _) ->
          let (x10, _) = x9 in
          (match x10 with
           | Some x11 ->
             if (=) x11 Atom
             then Runtime.let_
                    (let (x12, x13) = x8 in
                     let (_, x14) = x12 in
                     Runtime.ocaml_peek x14 (fun x15 ->
                       match x15 with
                       | Some _ ->
                         Runtime.let_
                           (Runtime.let_
                             (Runtime.ocaml_peek x14 (fun x16 ->
                               match x16 with
                               | Some x17 ->
                                 if (=) x17 '('
                                 then Runtime.let_
                                        (Runtime.ocaml_drop x14 (fun x18 ->
                                          ((x17, x5), x18))) (fun x18 ->
                                        let (x19, x20) = x18 in
                                        let (_, x21) = x19 in
                                        ((LParen, x21), x20))
                                 else if (=) x17 ')'
                                      then Runtime.let_
                                             (Runtime.ocaml_drop x14
                                               (fun x18 -> ((x17, x5), x18)))
                                             (fun x18 ->
                                             let (x19, x20) = x18 in
                                             let (_, x21) = x19 in
                                             ((RParen, x21), x20))
                                      else Runtime.let_
                                             (Runtime.let_
                                               (if (||)
                                                     ((&&) ((>=) x17 'A')
                                                       ((<=) x17 'Z'))
                                                     ((&&) ((>=) x17 'a')
                                                       ((<=) x17 'z'))
                                                then Runtime.ocaml_drop x14
                                                       (fun x18 -> ((x17, x5),
                                                       x18))
                                                else Runtime.failwith_
                                                       ('p'::('a'::('r'::('s'::('e'::('_'::('e'::('x'::('a'::('c'::('t'::(':'::(' '::('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('T'::('o'::('k'::('e'::('n'::('!'::[])))))))))))))))))))))))))))))))
                                               (fun x18 ->
                                               let (x19, x20) = x18 in
                                               let (_, x21) = x19 in
                                               let rec ffix0 x22 x23 x24 =
                                                 Runtime.ocaml_peek x24
                                                   (fun x25 ->
                                                   match x25 with
                                                   | Some x26 ->
                                                     if (||)
                                                          ((&&) ((>=) x26 '0')
                                                            ((<=) x26 '9'))
                                                          ((||)
                                                            ((&&)
                                                              ((>=) x26 'A')
                                                              ((<=) x26 'Z'))
                                                            ((&&)
                                                              ((>=) x26 'a')
                                                              ((<=) x26 'z')))
                                                     then Runtime.let_
                                                            (Runtime.ocaml_drop
                                                              x24 (fun x27 ->
                                                              ((x26, x23),
                                                              x27)))
                                                            (fun x27 ->
                                                            let (x28, x29) = x27
                                                            in
                                                            let (_, x30) = x28
                                                            in
                                                            ffix0 x22 x30 x29)
                                                     else x22 () x23 x24
                                                   | None -> x22 () x23 x24)
                                               in ffix0 (fun x22 x23 x24 ->
                                                    ((x22, x23), x24)) x21 x20))
                                             (fun x18 ->
                                             let (x19, x20) = x18 in
                                             let (_, x21) = x19 in
                                             ((Atom, x21), x20))
                               | None ->
                                 Runtime.failwith_
                                   ('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('E'::('O'::('F'::('!'::[])))))))))))))))))
                             (fun x16 ->
                             let (x17, x18) = x16 in
                             let (x19, x20) = x17 in
                             Runtime.let_
                               (let rec ffix0 x21 x22 x23 =
                                  Runtime.ocaml_peek x23 (fun x24 ->
                                    match x24 with
                                    | Some x25 ->
                                      if (||)
                                           ((&&) ((>=) x25 '\t')
                                             ((<=) x25 '\r')) ((=) x25 ' ')
                                      then Runtime.let_
                                             (Runtime.ocaml_drop x23
                                               (fun x26 -> (((), x22), x26)))
                                             (fun x26 ->
                                             let (x27, x28) = x26 in
                                             let (_, x29) = x27 in
                                             ffix0 x21 x29 x28)
                                      else x21 () x22 x23
                                    | None -> x21 () x22 x23)
                                in ffix0 (fun x21 x22 x23 -> ((x21, x22), x23))
                                     x20 x18) (fun x21 ->
                               let (x22, x23) = x21 in
                               let (x24, x25) = x22 in (((x19, x24), x25), x23))))
                           (fun x16 ->
                           let (x17, x18) = x16 in
                           let (x19, x20) = x17 in
                           ((x11, x7), (((Some (let (x21, _) = x19 in x21)),
                           x18), x20)))
                       | None -> ((x11, x7), ((None, x14), x13)))) (fun x12 ->
                    let (x13, x14) = x12 in
                    let (_, x15) = x13 in x6 (Stdlib.succ 0) x15 x14)
             else Runtime.let_
                    (Runtime.let_
                      (if (=) x11 LParen
                       then let (x12, x13) = x8 in
                            let (_, x14) = x12 in
                            Runtime.ocaml_peek x14 (fun x15 ->
                              match x15 with
                              | Some _ ->
                                Runtime.let_
                                  (Runtime.let_
                                    (Runtime.ocaml_peek x14 (fun x16 ->
                                      match x16 with
                                      | Some x17 ->
                                        if (=) x17 '('
                                        then Runtime.let_
                                               (Runtime.ocaml_drop x14
                                                 (fun x18 -> ((x17, x5), x18)))
                                               (fun x18 ->
                                               let (x19, x20) = x18 in
                                               let (_, x21) = x19 in
                                               ((LParen, x21), x20))
                                        else if (=) x17 ')'
                                             then Runtime.let_
                                                    (Runtime.ocaml_drop x14
                                                      (fun x18 -> ((x17, x5),
                                                      x18))) (fun x18 ->
                                                    let (x19, x20) = x18 in
                                                    let (_, x21) = x19 in
                                                    ((RParen, x21), x20))
                                             else Runtime.let_
                                                    (Runtime.let_
                                                      (if (||)
                                                            ((&&)
                                                              ((>=) x17 'A')
                                                              ((<=) x17 'Z'))
                                                            ((&&)
                                                              ((>=) x17 'a')
                                                              ((<=) x17 'z'))
                                                       then Runtime.ocaml_drop
                                                              x14 (fun x18 ->
                                                              ((x17, x5), x18))
                                                       else Runtime.failwith_
                                                              ('p'::('a'::('r'::('s'::('e'::('_'::('e'::('x'::('a'::('c'::('t'::(':'::(' '::('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('T'::('o'::('k'::('e'::('n'::('!'::[])))))))))))))))))))))))))))))))
                                                      (fun x18 ->
                                                      let (x19, x20) = x18 in
                                                      let (_, x21) = x19 in
                                                      let rec ffix0 x22 x23 x24 =
                                                        Runtime.ocaml_peek x24
                                                          (fun x25 ->
                                                          match x25 with
                                                          | Some x26 ->
                                                            if (||)
                                                                 ((&&)
                                                                   ((>=) x26
                                                                     '0')
                                                                   ((<=) x26
                                                                     '9'))
                                                                 ((||)
                                                                   ((&&)
                                                                     ((>=) x26
                                                                      'A')
                                                                     ((<=) x26
                                                                      'Z'))
                                                                   ((&&)
                                                                     ((>=) x26
                                                                      'a')
                                                                     ((<=) x26
                                                                      'z')))
                                                            then Runtime.let_
                                                                   (Runtime.ocaml_drop
                                                                     x24
                                                                     (fun x27 ->
                                                                     ((x26,
                                                                     x23),
                                                                     x27)))
                                                                   (fun x27 ->
                                                                   let (
                                                                     x28, x29) =
                                                                     x27
                                                                   in
                                                                   let (
                                                                     _, x30) =
                                                                     x28
                                                                   in
                                                                   ffix0 x22
                                                                     x30 x29)
                                                            else x22 () x23 x24
                                                          | None ->
                                                            x22 () x23 x24)
                                                      in ffix0
                                                           (fun x22 x23 x24 ->
                                                           ((x22, x23), x24))
                                                           x21 x20))
                                                    (fun x18 ->
                                                    let (x19, x20) = x18 in
                                                    let (_, x21) = x19 in
                                                    ((Atom, x21), x20))
                                      | None ->
                                        Runtime.failwith_
                                          ('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('E'::('O'::('F'::('!'::[])))))))))))))))))
                                    (fun x16 ->
                                    let (x17, x18) = x16 in
                                    let (x19, x20) = x17 in
                                    Runtime.let_
                                      (let rec ffix0 x21 x22 x23 =
                                         Runtime.ocaml_peek x23 (fun x24 ->
                                           match x24 with
                                           | Some x25 ->
                                             if (||)
                                                  ((&&) ((>=) x25 '\t')
                                                    ((<=) x25 '\r'))
                                                  ((=) x25 ' ')
                                             then Runtime.let_
                                                    (Runtime.ocaml_drop x23
                                                      (fun x26 -> (((), x22),
                                                      x26))) (fun x26 ->
                                                    let (x27, x28) = x26 in
                                                    let (_, x29) = x27 in
                                                    ffix0 x21 x29 x28)
                                             else x21 () x22 x23
                                           | None -> x21 () x22 x23)
                                       in ffix0 (fun x21 x22 x23 -> ((x21,
                                            x22), x23)) x20 x18) (fun x21 ->
                                      let (x22, x23) = x21 in
                                      let (x24, x25) = x22 in
                                      (((x19, x24), x25), x23)))) (fun x16 ->
                                  let (x17, x18) = x16 in
                                  let (x19, x20) = x17 in
                                  ((x11, x7), (((Some
                                  (let (x21, _) = x19 in x21)), x18), x20)))
                              | None -> ((x11, x7), ((None, x14), x13)))
                       else Runtime.failwith_
                              ('p'::('a'::('r'::('s'::('e'::('_'::('e'::('x'::('a'::('c'::('t'::(':'::(' '::('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('T'::('o'::('k'::('e'::('n'::('!'::[])))))))))))))))))))))))))))))))
                      (fun x12 ->
                      let (x13, x14) = x12 in
                      let (_, x15) = x13 in
                      let rec ffix0 x16 x17 x18 = match x18 with
                      | (x19, _) ->
                        let (x20, _) = x19 in
                        (match x20 with
                         | Some x21 ->
                           if (=) x21 RParen
                           then let (x22, x23) = x18 in
                                let (_, x24) = x22 in
                                Runtime.ocaml_peek x24 (fun x25 ->
                                  match x25 with
                                  | Some _ ->
                                    Runtime.let_
                                      (Runtime.let_
                                        (Runtime.ocaml_peek x24 (fun x26 ->
                                          match x26 with
                                          | Some x27 ->
                                            if (=) x27 '('
                                            then Runtime.let_
                                                   (Runtime.ocaml_drop x24
                                                     (fun x28 -> ((x27, x5),
                                                     x28))) (fun x28 ->
                                                   let (x29, x30) = x28 in
                                                   let (_, x31) = x29 in
                                                   ((LParen, x31), x30))
                                            else if (=) x27 ')'
                                                 then Runtime.let_
                                                        (Runtime.ocaml_drop x24
                                                          (fun x28 -> ((x27,
                                                          x5), x28)))
                                                        (fun x28 ->
                                                        let (x29, x30) = x28 in
                                                        let (_, x31) = x29 in
                                                        ((RParen, x31), x30))
                                                 else Runtime.let_
                                                        (Runtime.let_
                                                          (if (||)
                                                                ((&&)
                                                                  ((>=) x27 'A')
                                                                  ((<=) x27 'Z'))
                                                                ((&&)
                                                                  ((>=) x27 'a')
                                                                  ((<=) x27 'z'))
                                                           then Runtime.ocaml_drop
                                                                  x24
                                                                  (fun x28 ->
                                                                  ((x27, x5),
                                                                  x28))
                                                           else Runtime.failwith_
                                                                  ('p'::('a'::('r'::('s'::('e'::('_'::('e'::('x'::('a'::('c'::('t'::(':'::(' '::('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('T'::('o'::('k'::('e'::('n'::('!'::[])))))))))))))))))))))))))))))))
                                                          (fun x28 ->
                                                          let (x29, x30) = x28
                                                          in
                                                          let (_, x31) = x29 in
                                                          let rec ffix1 x32 x33 x34 =
                                                            Runtime.ocaml_peek
                                                              x34 (fun x35 ->
                                                              match x35 with
                                                              | Some x36 ->
                                                                if (||)
                                                                     ((&&)
                                                                      ((>=) x36
                                                                      '0')
                                                                      ((<=) x36
                                                                      '9'))
                                                                     ((||)
                                                                      ((&&)
                                                                      ((>=) x36
                                                                      'A')
                                                                      ((<=) x36
                                                                      'Z'))
                                                                      ((&&)
                                                                      ((>=) x36
                                                                      'a')
                                                                      ((<=) x36
                                                                      'z')))
                                                                then Runtime.let_
                                                                      (Runtime.ocaml_drop
                                                                      x34
                                                                      (fun x37 ->
                                                                      ((x36,
                                                                      x33),
                                                                      x37)))
                                                                      (fun x37 ->
                                                                      let (
                                                                      x38, x39) =
                                                                      x37
                                                                      in
                                                                      let (
                                                                      _, x40) =
                                                                      x38
                                                                      in
                                                                      ffix1 x32
                                                                      x40 x39)
                                                                else x32 () x33
                                                                      x34
                                                              | None ->
                                                                x32 () x33 x34)
                                                          in ffix1
                                                               (fun x32 x33 x34 ->
                                                               ((x32, x33),
                                                               x34)) x31 x30))
                                                        (fun x28 ->
                                                        let (x29, x30) = x28 in
                                                        let (_, x31) = x29 in
                                                        ((Atom, x31), x30))
                                          | None ->
                                            Runtime.failwith_
                                              ('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('E'::('O'::('F'::('!'::[])))))))))))))))))
                                        (fun x26 ->
                                        let (x27, x28) = x26 in
                                        let (x29, x30) = x27 in
                                        Runtime.let_
                                          (let rec ffix1 x31 x32 x33 =
                                             Runtime.ocaml_peek x33 (fun x34 ->
                                               match x34 with
                                               | Some x35 ->
                                                 if (||)
                                                      ((&&) ((>=) x35 '\t')
                                                        ((<=) x35 '\r'))
                                                      ((=) x35 ' ')
                                                 then Runtime.let_
                                                        (Runtime.ocaml_drop x33
                                                          (fun x36 -> (((),
                                                          x32), x36)))
                                                        (fun x36 ->
                                                        let (x37, x38) = x36 in
                                                        let (_, x39) = x37 in
                                                        ffix1 x31 x39 x38)
                                                 else x31 () x32 x33
                                               | None -> x31 () x32 x33)
                                           in ffix1 (fun x31 x32 x33 -> ((x31,
                                                x32), x33)) x30 x28)
                                          (fun x31 ->
                                          let (x32, x33) = x31 in
                                          let (x34, x35) = x32 in
                                          (((x29, x34), x35), x33))))
                                      (fun x26 ->
                                      let (x27, x28) = x26 in
                                      let (x29, x30) = x27 in
                                      x16 [] x17 (((Some
                                        (let (x31, _) = x29 in x31)), x28), x30))
                                  | None -> x16 [] x17 ((None, x24), x23))
                           else Runtime.let_
                                  (Obj.magic ffix (fun x22 x23 x24 -> ((x22,
                                    x23), x24)) x17 x18) (fun x22 ->
                                  let (x23, x24) = x22 in
                                  let (x25, x26) = x23 in
                                  Runtime.let_
                                    (ffix0 (fun x27 x28 x29 -> ((x27, x28),
                                      x29)) x26 x24) (fun x27 ->
                                    let (x28, x29) = x27 in
                                    let (x30, x31) = x28 in
                                    x16 (x25 :: x30) x31 x29))
                         | None ->
                           Runtime.failwith_
                             ('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('E'::('O'::('F'::('!'::[]))))))))))))))))
                      in ffix0 (fun x16 x17 x18 -> ((x16, x17), x18)) x15 x14))
                    (fun x12 ->
                    let (x13, x14) = x12 in
                    let (x15, x16) = x13 in
                    x6
                      (let rec ffix0 x17 x18 =
                         match x17 with
                         | [] -> x18
                         | x19 :: x20 -> ffix0 x20 ((+) x18 x19)
                       in ffix0 x15 0) x16 x14)
           | None ->
             Runtime.failwith_
               ('U'::('n'::('e'::('x'::('p'::('e'::('c'::('t'::('e'::('d'::(' '::('E'::('O'::('F'::('!'::[]))))))))))))))))
        in ffix (fun x6 _ _ -> x6) (let (_, x6) = x in x6) (((Some
             (let (x6, _) = x4 in x6)), x3), x5))
   end

end

let make_stream (str : 'a Example_parsers.ocaml_stream) : ('a Example_parsers.ocaml_stream, 'a) Example_parsers.stream =
  {
    state = str;
    peek_st = (fun _ -> Runtime.ocaml_peek);
    drop_st = (fun _ -> Runtime.ocaml_drop);
    lookahead_st = (fun _ -> Runtime.ocaml_lookahead);
  }

let stream_of_string s = make_stream (Runtime.from_string s)

let parse stream = Example_parsers.Sexp.p_sexp_opt ((),()) stream
